____________________Function to find unique substrings using rolling hashing__________________________________

int count_unique_substrings(string const& s) {
    int n = s.size();

    const int p = 31;   // to mark the number of characters
    const int m = 1e9 + 9; // modulo
    vector<long long> p_pow(n); // to store the powers of p
    p_pow[0] = 1;
    for (int i = 1; i < n; i++)
        p_pow[i] = (p_pow[i-1] * p) % m; // precomputiong the powers of p

    vector<long long> h(n + 1, 0);
    for (int i = 0; i < n; i++)
        h[i+1] = (h[i] + (s[i] - 'a' + 1) * p_pow[i]) % m; creating the hash of all prefixes of string

    int cnt = 0;
    for (int l = 1; l <= n; l++) {
        unordered_set<long long> hs; // to count the unique substrings of length l

// for each strting position calculating the hash value of the 
//substring of length l starting from that position
        
        for (int i = 0; i <= n - l; i++) {
            long long cur_h = (h[i + l] + m - h[i]) % m; 
            cur_h = (cur_h * p_pow[n-i-1]) % m;
            hs.insert(cur_h);
        }
        cnt += hs.size();
    }
    return cnt;
}

______________________________Optimization to prevent collisions___________________________________________

const int mod1 = 1e9 + 7;
const int mod2 = 1e9 + 9;
const int p = 31;

vector<int> h1(n + 1, 0), h2(n + 1, 0);
vector<int> p_pow1(n + 1, 1), p_pow2(n + 1, 1);

for (int i = 0; i < n; i++) {
    p_pow1[i + 1] = (p_pow1[i] * p) % mod1;
    p_pow2[i + 1] = (p_pow2[i] * p) % mod2;

    h1[i + 1] = (h1[i] + (s[i] - 'a' + 1) * p_pow1[i]) % mod1;
    h2[i + 1] = (h2[i] + (s[i] - 'a' + 1) * p_pow2[i]) % mod2;
}

int ans = 0;
for (int len = 1; len <= n; len++) {
    set<pair<int, int>> st;
    for (int i = 0; i + len <= n; i++) {
        int j = i + len;

        int hash1 = (h1[j] - h1[i] + mod1) % mod1;
        hash1 = (hash1 * p_pow1[n - i]) % mod1;

        int hash2 = (h2[j] - h2[i] + mod2) % mod2;
        hash2 = (hash2 * p_pow2[n - i]) % mod2;

        st.insert({hash1, hash2});
    }
    ans += st.size();
}

____________________________Rabin Karp for string matching______________________________________________

vector<int> rabin_karp(string const& s, string const& t) {
    const int p = 31; 
    const int m = 1e9 + 9;
    int S = s.size(), T = t.size();

    vector<long long> p_pow(max(S, T)); 
    p_pow[0] = 1; 
    for (int i = 1; i < (int)p_pow.size(); i++) 
        p_pow[i] = (p_pow[i-1] * p) % m;  // Just precomputing the powers of p

    vector<long long> h(T + 1, 0); 
    for (int i = 0; i < T; i++)
        h[i+1] = (h[i] + (t[i] - 'a' + 1) * p_pow[i]) % m;  // creating prefix hashes of Text
    long long h_s = 0; 
    for (int i = 0; i < S; i++) 
        h_s = (h_s + (s[i] - 'a' + 1) * p_pow[i]) % m; // Finding hash of the pattern

    vector<int> occurrences;
    for (int i = 0; i + S - 1 < T; i++) {
        long long cur_h = (h[i+S] + m - h[i]) % m;
        if (cur_h == h_s * p_pow[i] % m)    // Here instead of dividing or normalizing, we multiply the same                                                     // factor to pattern too.
            occurrences.push_back(i);
    }
    return occurrences;
}

____________________________________________KMP FOR STRING MATCHING________________________________________

vector<int> prefix_function(string s) {
    int n = (int)s.length();
    vector<int> lps(n);
    for (int i = 1; i < n; i++) {
        int j = lps[i-1];
        while (j > 0 && s[i] != s[j])
            j = lps[j-1];
        if (s[i] == s[j])
            j++;
        lps[i] = j;
    }
    return lps;
}

_________________________Automata to match a string s in text t_______________________________________________________________________

void compute_automaton(string s, vector<vector<int>>& aut) {
    s += '#';
    int n = s.size();
    vector<int> pi = prefix_function(s); // generate the prefix function of s
    aut.assign(n, vector<int>(26));  // generate the automata table that indicates if we are at the state                                         //  i(obviously from 0->n) and we encounter character no. c, which                                           //  state will we get to...
    for (int i = 0; i < n; i++) {
        for (int c = 0; c < 26; c++) {
            if (i > 0 && 'a' + c != s[i])   // go back the same way as we used to go while building the                                                    //  prefix function(just using the previously stored results)
                aut[i][c] = aut[pi[i-1]][c];
            else
                aut[i][c] = i + ('a' + c == s[i]);
        }
    }
}

__________________________________Z-funtion array for string matching__________________________________________________

vector<int> z_function(string s) {
    int n = s.size();
    vector<int> z(n);
    int l = 0, r = 0;
    for(int i = 1; i < n; i++) {
        if(i < r) {
            z[i] = min(r - i, z[i - l]);
        }
        while(i + z[i] < n && s[z[i]] == s[i + z[i]]) {
            z[i]++;
        }
        if(i + z[i] > r) {
            l = i;
            r = i + z[i];
        }
    }
    return z;
}

_________________________________________Suffix Arrays Generation______________________________________

vector<int> sort_cyclic_shifts(string const& s) {
    int n = s.size();
    const int alphabet = 256;
     vector<int> p(n), c(n), cnt(max(alphabet, n), 0);
    for (int i = 0; i < n; i++)
        cnt[s[i]]++;
    for (int i = 1; i < alphabet; i++)
        cnt[i] += cnt[i-1];
    for (int i = 0; i < n; i++)
        p[--cnt[s[i]]] = i;
    c[p[0]] = 0;
    int classes = 1;
    for (int i = 1; i < n; i++) {
        if (s[p[i]] != s[p[i-1]])
            classes++;
        c[p[i]] = classes - 1;
    }
        vector<int> pn(n), cn(n);
    for (int h = 0; (1 << h) < n; ++h) {
        for (int i = 0; i < n; i++) {
            pn[i] = p[i] - (1 << h);
            if (pn[i] < 0)
                pn[i] += n;
        }
        fill(cnt.begin(), cnt.begin() + classes, 0);
        for (int i = 0; i < n; i++)
            cnt[c[pn[i]]]++;
        for (int i = 1; i < classes; i++)
            cnt[i] += cnt[i-1];
        for (int i = n-1; i >= 0; i--)
            p[--cnt[c[pn[i]]]] = pn[i];
        cn[p[0]] = 0;
        classes = 1;
        for (int i = 1; i < n; i++) {
            pair<int, int> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};
            pair<int, int> prev = {c[p[i-1]], c[(p[i-1] + (1 << h)) % n]};
            if (cur != prev)
                ++classes;
            cn[p[i]] = classes - 1;
        }
        c.swap(cn);
    }
    return p;
}

vector<int> suffix_array_construction(string s) {
    s += "$";
    vector<int> sorted_shifts = sort_cyclic_shifts(s);
    sorted_shifts.erase(sorted_shifts.begin());
    return sorted_shifts;
}

__________________________________________________________________________________________________
