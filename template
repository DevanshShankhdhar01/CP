#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define int long long
#define fori(a,b,c) for(int i=a;i<b;i+=c)
#define forj(a,b,c) for(int j=a;j<b;j+=c)

#define vi vector<int>
#define vvi vector<vector<int>>
#define vii vector<pair<int,int>>
#define pii pair<int,int>

#define pqmini priority_queue<int, vector<int>, greater<int>>
#define pqminpi priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>


#define srt(v) sort((v).begin(), (v).end())     
#define rsrt(v) sort((v).rbegin(), (v).rend())  
bool customsort(const pair<int, int>& a, const pair<int, int>& b) {
    if (a.first == b.first) return a.second < b.second; // Ascending by second
    return a.first > b.first; // Descending by first
}


#define pb push_back
#define yes cout << "YES\n";
#define no cout << "NO\n";

#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) (1ll*(a) * (b / gcd(a, b)))

#define setbits(x) __builtin_popcountll(x) // Count set bits
#define clz(x) __builtin_clzll(x)   // Count leading zeroes
#define ctz(x) __builtin_ctzll(x)   // Count trailing zeroes

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

template<typename T>
using ordered_multiset = tree<pair<T,int>, null_type, less<pair<T,int>>, rb_tree_tag,tree_order_statistics_node_update>;



int32_t main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr); std::cout.tie(nullptr);
    int tt=1;
    cin>>tt;
    while(tt--){
        
    }
	
}

















